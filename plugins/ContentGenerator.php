<?php

    class TContentGenerator extends TBaseGenerator
    {
        function render(array $attr = null, $innerText = null)
        {
            $def = null;
            if (isset($attr['ref'])) 
            {
                $def = $this->content->findByName($attr['ref']);
                if (!isset($def)) return 'Content for content_name: '.$attr['name'].' not defined';
            }
            else
            {
                if (!isset($this->context)) return 'Content for content_id: '.$this->cms->idx_current_page.' not defined';
                $def = $this->context;
            }

            $result = '<p>This content is autogenerated based on existing content subnodes</p>'."\n".'<q:list />';
            //return 'Content source reference missing for content_id: '.$this->cms->idx_current_page;
            
            $filename = $def->getFullURL();
            if (!isset($filename)) return $result; //  there is no url defined here
            
            $path = pathinfo($filename);
            if (!isset($path['extension'])) return $result; //  url does not indicate an actual file

            //  read file and render its content
            if (!file_exists($filename)) return 'Content source not found for content_id: '.$this->cms->idx_current_page.' ('.$filename.')';
            
            $ext = strtolower(pathinfo($filename, PATHINFO_EXTENSION));
            $result = trim(file_get_contents($filename));
            
            if (isset($attr['excerpt']) && trim(strtolower($attr['excerpt'])) == 'true')
            {
                $k1 = strpos($result, "\n");
                $k2 = strpos($result, "</p>");
                $k = min($k1, $k2);
                $result = substr($result, 0, $k);
            }
            
            switch ($ext)
            {
                case 'txt':
                    $result = str_replace('[<', '::start::', $result);
                    $result = str_replace('>]', '::stop::', $result);
                    $result = htmlspecialchars($result, ENT_NOQUOTES);
                    $result = '<pre style="white-space: pre-wrap;">'.$result.'</pre>';
                    $result = str_replace('::start::', '<', $result);
                    $result = str_replace('::stop::', '>', $result);
                    return $result;
                default:
                    return $result;
                    break;
            }
        
            return $result;
        }
    }
    
?>